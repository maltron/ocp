- name: "Create all the necessary Projects/Namespaces needed"
  command: "{{ oc_client }} new-project {{ item }}"
  with_items: [ istio-system ]
  ignore_errors: True

- name: "Create all the necessary Operators needed"
  shell: "{{ item }} | {{ oc_client }} create -f -"
  with_items:
      - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"elasticsearch-operator","namespace":"openshift-operators"},"spec":{"channel":"4.3","installPlanApproval":"Automatic","name":"elasticsearch-operator","source":"redhat-operators","sourceNamespace":"openshift-marketplace"}}'
      - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"jaeger-product","namespace":"openshift-operators"},"spec":{"channel":"stable","installPlanApproval":"Automatic","name":"jaeger-product","source":"redhat-operators","sourceNamespace":"openshift-marketplace"}}'
      - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"kiali-ossm","namespace":"openshift-operators"},"spec":{"channel":"stable","installPlanApproval":"Automatic","name":"kiali-ossm","source":"redhat-operators","sourceNamespace":"openshift-marketplace"}}'
      - echo '{"apiVersion":"operators.coreos.com\/v1alpha1","kind":"Subscription","metadata":{"name":"servicemeshoperator","namespace":"openshift-operators"},"spec":{"channel":"1.0","installPlanApproval":"Automatic","name":"servicemeshoperator","source":"redhat-operators","sourceNamespace":"openshift-marketplace"}}'
  ignore_errors: True
  tags: [ operator ]

- name: "Fetching the Service Mesh Operator Version"
  command: "{{ oc_client }} get clusterserviceversion --output jsonpath='{.items[*].metadata.name}' --namespace istio-system"
  register: clusterserviceversion
  until: clusterserviceversion.rc == 0 and clusterserviceversion.stdout|regex_search(servicemesh_pattern)
  retries: 20
  delay: 20
  ignore_errors: True
  tags: [ operator ]

- name: "Service Mesh Found: {{ clusterserviceversion.stdout | regex_search(servicemesh_pattern) }}"
  set_fact: servicemeshoperatorversion={{ clusterserviceversion.stdout | regex_search(servicemesh_pattern) }}
  tags: [ operator ]

- name: "Waiting for Istio System to be ready"
  command: "{{ oc_client }} get clusterserviceversion/{{ servicemeshoperatorversion }} --namespace istio-system -o jsonpath='{.status.phase}'"
  register: operator_status
  until: operator_status.rc == 0 and operator_status.stdout == "Succeeded"
  retries: 5
  delay: 60
  ignore_errors: True

- name: "Creating Istio Control Plane on istio-system namespace"
  shell: echo '{"apiVersion":"maistra.io\/v1","kind":"ServiceMeshControlPlane","metadata":{"name":"basic-install","namespace":"istio-system"},"spec":{"istio":{"gateways":{"istio-egressgateway":{"autoscaleEnabled":false},"istio-ingressgateway":{"autoscaleEnabled":false, "ior_enabled":"true"}},"mixer":{"policy":{"autoscaleEnabled":false},"telemetry":{"autoscaleEnabled":false}},"pilot":{"autoscaleEnabled":false,"traceSampling":100},"kiali":{"enabled":true},"grafana":{"enabled":true},"tracing":{"enabled":true,"jaeger":{"template":"all-in-one"}}}}}' | {{ oc_client }} create -n istio-system -f -
  ignore_errors: True

- name: "Creating Istio Service Mesh Member Roll on istio-system namespace"
  shell: echo '{"apiVersion":"maistra.io\/v1","kind":"ServiceMeshMemberRoll","metadata":{"name":"default","namespace":"istio-system"},"spec":{"members":["your-project","another-of-your-projects"]}}' | {{ oc_client }} create -n istio-system -f -
  ignore_errors: True              

